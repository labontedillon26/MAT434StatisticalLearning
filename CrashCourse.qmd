---
title: Crash Course in Git, Quarto, and R
author: 
  - name: Dillon Labonte
    email: dillon.labonte@snhu.edu
    affiliations: 
      - name: Southern New Hampshire University
format: html
date: 1/8/2025
date-modified: today
date-format: long
theme: flatly
toc: true
code-fold: true
warning: false
message: false
---

## Working with Data

```{r}

library(tidyverse)
library(tidymodels)
library(kableExtra)
library(skimr)

# styling
options(kable_styling_bootstrap_options = c("hover", "striped"))
theme_set(theme_bw(base_size = 14))

# read in hits data
hits <- read_csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/battedballs.csv")

# read in parks data
parks <- read_csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/park_dimensions.csv")

```

## Exploring Our Data

```{r}

hits |>
  head() |>
  kable() |>
  kable_styling()

```

```{r}

parks |>
  head() |>
  kable() |>
  kable_styling()

```

## Joining the Data

```{r}

hits <- hits |>
  left_join(parks, by = c("park" = "park"))

```

We joined the `hits` and `parks` data together to obtain a full dataset with `r nrow(hits)` rows and `r ncol(hits)` columns.

```{r}

hits |>
  head() |>
  kable() |>
  kable_styling()

```

```{r}

hits |>
  glimpse()

```


```{r}

hits |>
  skim() |>
  kable() |>
  kable_styling()

```

Split into training and test data.

```{r}

set.seed(434)
data_splits <- initial_split(hits, prop = 0.85, strata = is_home_run)

train <- training(data_splits)
test <- testing(data_splits)

```

## Exploratory Data Analysis

How and why do home runs happen?

### Sometimes Useful Functionality

Filtering rows

```{r}

train |>
  filter(is_home_run == 1) |>
  kable() |>
  kable_styling()

```

```{r}

train |>
  filter(str_detect(NAME, "Fenway")) |>
  kable() |>
  kable_styling()

```

```{r}

train |>
  select(launch_speed, launch_angle, is_home_run) |>
  kable() |>
  kable_styling()

```

Building new variables from old ones (*Feature Engineering*)

```{r}

train <- train |>
  mutate(fast_pitch = ifelse(pitch_mph > 100, "yes", "no"))

```

### Summary statistics 

Home runs...

```{r}

train |>
  count(is_home_run) |>
  mutate(prop = 100 * n / sum(n)) |>
  kable() |>
  kable_styling()

```

```{r}

train |>
  summarize(pct_hr = 100 * mean(is_home_run)) |>
  kable() |>
  kable_styling()

```

Summarizing launch angle...

```{r}

train |>
  filter(!is.na(launch_angle)) |>
  summarize(
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle)
  ) |>
  kable() |>
  kable_styling()

```

#### Grouped Summaries

```{r}

train |>
  filter(!is.na(launch_angle)) |>
  group_by(is_home_run) |>
  summarize(
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle)
  ) |>
  kable() |>
  kable_styling()

```

### Data Visualizations

```{r}

train |>
  ggplot() +
  geom_bar(aes(x = is_home_run))

```

```{r}

train |>
  ggplot() +
  geom_histogram(aes(x = pitch_mph, y = after_stat(density), color = pitch_name, fill = pitch_name), alpha = 0.5) +
  geom_density(aes(x = pitch_mph, color = pitch_name, fill = pitch_name), alpha = 0.3) +
  facet_wrap(~ pitch_name, scales = 'free_y') +
  labs(
    title = "Pitch Speed Distribution",
    x = "Pitch Speed (mph)",
    y = "Count"
  ) +
  theme(
    legend.position = 'none'
  )

```

```{r}

train |>
  ggplot() +
  geom_histogram(aes(x = launch_speed))

```

```{r}

train |>
  ggplot() +
  geom_histogram(aes(x = launch_angle), bins = 30)

```

```{r}

home_run_data <- train |>
  filter(is_home_run == 1) |>  # Filter for home runs
  count(NAME, name = "home_runs") |>  # Count home runs per stadium
  arrange(desc(home_runs)) |>  # Sort by number of home runs
  mutate(NAME = factor(NAME, levels = NAME))  # Reorder NAME by home_runs

# Plot the data
ggplot(home_run_data, aes(x = NAME, y = home_runs, fill = home_runs)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Number of Home Runs per MLB Stadium",
    x = "Home Run Count",
    y = "Stadium Name"
  ) +
  theme_minimal()

```

## Model Construction, Evaluation, and Tuning

Prep our data.

```{r}

hits_for_model <- hits |>
  mutate(is_home_run = ifelse(is_home_run == 1, "yes", "no")) |>
  mutate(is_home_run = factor(is_home_run, levels = c("no", "yes")))

set.seed(434)
data_splits <- initial_split(hits_for_model, prop = 0.85, strata = is_home_run)

train <- training(data_splits)
test <- testing(data_splits)

```

Fitting a model.

```{r}

dt_spec <- decision_tree() |>
  set_engine("rpart") |>
  set_mode("classification")

dt_rec <- recipe(is_home_run ~ launch_speed + launch_angle + pitch_mph + pitch_name + Cover, data = train) |>
  step_impute_median(all_numeric_predictors()) |>
  step_impute_mode(all_nominal_predictors()) |>
  step_dummy(all_nominal_predictors())

dt_wf <- workflow() |>
  add_model(dt_spec) |>
  add_recipe(dt_rec)

dt_fit <- dt_wf |>
  fit(train)

```

Let's see the model...

```{r}

dt_fit |>
  extract_fit_engine() |>
  rpart.plot::rpart.plot()

```

Assess our model's performance...

Training data...

```{r}

dt_fit |>
  augment(train) |>
  accuracy(is_home_run, .pred_class)

```

Test data...

```{r}

dt_fit |>
  augment(test) |>
  accuracy(is_home_run, .pred_class)

```

Cross-Validation

```{r}

train_folds <- vfold_cv(train, v = 10, strata = is_home_run)

dt_cv_results <- dt_wf |>
  fit_resamples(train_folds)

dt_cv_results |>
  collect_metrics()

```

